<!doctype html>
<html lang="en">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta http-equiv="Cache-control" content="public" />
		<meta
			name="viewport"
			content="width=device-width, height=device-height, initial-scale=1.0, maximum-scale=1.0, user-scalable=0, viewport-fit=cover"
		/>
		<meta name="description" content="A free text-based bookmarking website." />
		<meta name="keywords" content="bookmarking, free bookmarking, push notifications, web push" />
		<meta name="apple-mobile-web-app-capable" content="yes" />
		<meta name="apple-mobile-web-app-status-bar-style" content="default" />

		<!-- Icons & Theme-->
		<meta name="theme-color" content="#fff" />
		<title><%= title %></title>
		<script src="/vue.global.prod.js"></script>
		<style type="text/css">
			html,
			body {
				overscroll-behavior: none;
			}
			body {
				font-family:
					system-ui,
					-apple-system,
					BlinkMacSystemFont,
					"Segoe UI",
					Roboto,
					Ubuntu,
					"Helvetica Neue",
					sans-serif;
				margin: 0;
				line-height: 1.5;
				-webkit-font-smoothing: antialiased;
				-moz-osx-font-smoothing: grayscale;
				-webkit-text-size-adjust: 100%;
			}
			a {
				color: inherit;
			}
			#canvas {
				height: 96vh;
				width: 100%;
				max-width: 640px;
				overflow: hidden;
				box-sizing: border-box;
				margin: auto;
				flex-direction: column;
				justify-content: space-around;
			}
			#canvas svg {
				width: 100%;
			}
			#about {
				text-align: center;
				font-size: 1.2rem;
				line-height: 1.75;
				padding: 0rem 2rem 1rem;
				color: #2c3d51;
			}
			#about a {
				font-weight: 500;
			}
			#ball {
				transform: translateZ(0);
				animation: rot 2000ms infinite linear;
				animation-play-state: paused;
			}
			#ball.started {
				animation-play-state: running;
			}
			#play {
				cursor: pointer;
			}
			#finalscore,
			#best {
				font-size: 70%;
				fill: #34495e;
			}
			#best {
				font-style: italic;
				font-size: 50%;
			}
			#tip {
				font-weight: 300;
				font-size: 18%;
				font-style: italic;
				padding: 0.5rem 2rem 0rem;
			}
			#shareBtn {
				background: #1d9bf0;
				color: #fff;
				width: 150px;
				text-align: center;
				text-decoration: none;
				border-radius: 2rem;
				padding: 0.3rem 1.5rem;
				margin: 1rem auto 0px;
				font-size: 1.25rem;
				display: block;
			}
			#shareBtn.hide {
				visibility: hidden;
			}

			@keyframes rot {
				from {
					transform: rotate(0deg) translate(40%) rotate(0deg);
				}
				to {
					transform: rotate(360deg) translate(40%) rotate(-360deg);
				}
			}
		</style>
	</head>

	<body>
		<section id="canvas">
			<div id="game" style="height: 80vh; display: flex">
				<svg id="looptap" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">
					<rect id="bg" x="0" cy="0" height="100" width="100" fill="none" />
					<text
						x="50"
						y="50"
						dominant-baseline="middle"
						text-anchor="middle"
						class="score"
						id="score"
						v-if="state === 'started'"
						v-html="score"
					></text>
					<text
						x="50"
						y="32"
						text-anchor="middle"
						class="score"
						id="finalscore"
						v-if="state === 'stopped'"
						v-html="score"
					></text>
					<text
						x="50"
						y="70"
						text-anchor="middle"
						class="score"
						id="best"
						v-if="state === 'stopped'"
						v-html="'Best: '+best"
					></text>
					<g id="tip" v-if="state === 'init'">
						<text x="50" y="68" text-anchor="middle" class="tip">Tap anywhere / press spacebar when</text>
						<text x="50" y="74" text-anchor="middle" class="tip">the ball is on the colored area.</text>
					</g>
					<path
						id="arc"
						fill="none"
						v-bind:stroke="colors[Math.floor(score / 10)] || colors[Math.floor((score - 270) / 10)] || '#bdc3c7'"
						stroke-width="10"
						stroke-linejoin="round"
						stroke-linecap="round"
						v-bind:d="arcDValue"
					/>
					<circle
						id="ball"
						cx="50"
						cy="50"
						r="4"
						fill="#2C3D51"
						v-bind:class="state"
						v-bind:style="'animation-duration: '+(2000 - taps * 5) + 'ms'"
					/>
					<polygon
						id="play"
						points="45,45 55,50 45,55"
						fill="#2C3D51"
						stroke="#2C3D51"
						stroke-width="5"
						stroke-linejoin="round"
						stroke-linecap="round"
						v-if="state !== 'started'"
						v-on:click="startPlay"
					/>
				</svg>
			</div>
			<a
				id="shareBtn"
				v-bind:href="'https://twitter.com/intent/tweet?url=https%3A%2F%2Fwebtag.io%2Flooptap&text=Beat%20my%20score%3A%20'+score+'%0aLooptap%20-%20a%20minimal%20game%20to%20waste%20your%20time.&hashtags=webtag,looptap'"
				v-if="['stopped', 'started'].includes(state)"
				target="_blank"
				v-bind:class="state === 'started' ? 'hide' : ''"
			>
				Share your score
			</a>
			<div id="about" v-if="state === 'init'"><strong>Looptap.</strong> <br />A minimal game to waste your time.</div>
		</section>

		<script type="text/javascript">
			const loopTapApp = Vue.createApp({
				data() {
					return {
						arc: [180, 270],
						taps: 0,
						score: 0,
						best: window.localStorage.best || 0,
						state: "init",
						prevTapTime: 0,
						colors: [
							"#ED5565",
							"#D9444F",
							"#ED5F56",
							"#DA4C43",
							"#F87D52",
							"#E7663F",
							"#FAB153",
							"#F59B43",
							"#FDCE55",
							"#F6BA43",
							"#C2D568",
							"#B1C353",
							"#99D469",
							"#83C251",
							"#42CB70",
							"#3CB85D",
							"#47CEC0",
							"#3BBEB0",
							"#4FC2E7",
							"#3CB2D9",
							"#5C9DED",
							"#4C8CDC",
							"#9398EC",
							"#7277D5",
							"#CC93EF",
							"#B377D9",
							"#ED87BF",
							"#D870AE",
						],
					};
				},
				computed: {
					arcDValue() {
						return this.describeArc(50, 50, 40, this.arc[0], this.arc[1]);
					},
				},
				methods: {
					polarToCartesian(centerX, centerY, radius, angleInDegrees) {
						const angleInRadians = ((angleInDegrees - 90) * Math.PI) / 180.0;
						return {
							x: centerX + radius * Math.cos(angleInRadians),
							y: centerY + radius * Math.sin(angleInRadians),
						};
					},

					describeArc(x, y, radius, startAngle, endAngle) {
						const start = this.polarToCartesian(x, y, radius, endAngle);
						const end = this.polarToCartesian(x, y, radius, startAngle);
						const arcFlag = endAngle - startAngle <= 180 ? "0" : "1";
						const d = ["M", start.x, start.y, "A", radius, radius, 0, arcFlag, 0, end.x, end.y].join(" ");
						return d;
					},

					getAngle(cx, cy, ex, ey) {
						const dy = ey - cy;
						const dx = ex - cx;
						let theta = Math.atan2(dx, -dy);
						theta *= 180 / Math.PI;
						theta = theta < 0 ? theta + 360 : theta;
						return theta;
					},

					getBallAngle() {
						const bg = document.getElementById("bg").getBoundingClientRect();
						const bgCenter = { x: bg.left + bg.width / 2, y: bg.top + bg.height / 2 };
						const ball = document.getElementById("ball").getBoundingClientRect();
						const ballCenter = { x: ball.left + ball.width / 2, y: ball.top + ball.height / 2 };
						return this.getAngle(bgCenter.x, bgCenter.y, ballCenter.x, ballCenter.y);
					},

					setArc() {
						const random = (i, j) => Math.floor(Math.random() * (j - i)) + i;
						let arc = [];
						arc.push(random(0, 300));
						arc.push(random(arc[0] + 10, arc[0] + 110));
						arc[1] = arc[1] > 360 ? 360 : arc[1];
						this.arc = arc;
					},

					startPlay() {
						this.state = "started";
						this.taps = 0;
						this.score = 0;
						this.prevTapTime = Date.now();
					},
					stopPlay() {
						if (this.state === "started") {
							this.state = "stopped";
							if (this.score > this.best) window.localStorage.best = this.best = this.score;
						}
					},

					tap(e) {
						e.preventDefault();
						e.stopPropagation();
						if (this.state === "started") {
							const ballAngle = this.getBallAngle();
							// adding a 6 for better accuracy as the arc stroke extends beyond the angle.
							if (ballAngle + 6 > this.arc[0] && ballAngle - 6 < this.arc[1]) {
								const currentTapTime = Date.now();
								const tapInterval = currentTapTime - this.prevTapTime;
								this.taps++;
								this.score = this.score + (tapInterval < 500 ? 5 : tapInterval < 1000 ? 2 : 1);
								this.prevTapTime = currentTapTime;
								this.setArc();
							} else this.stopPlay();
						}
					},
				},
			}).mount("#canvas");

			if ("ontouchstart" in window) {
				window.addEventListener("touchstart", loopTapApp.tap);
			} else {
				window.addEventListener("mousedown", loopTapApp.tap);
				window.onkeypress = (e) => {
					if (e.keyCode == 32) {
						if (loopTapApp.state === "stopped") {
							loopTapApp.startPlay();
						} else {
							loopTapApp.tap(e);
						}
					}
				};
			}
		</script>
		<!-- INSERT_ANALYTICS_SCRIPT -->
	</body>
</html>
